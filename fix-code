@Override
public void afterJob(JobExecution jobExecution) {
    String jobName = jobExecution.getJobInstance().getJobName();
    String jobCode = jobContext.getJobCode();
    String jobType = jobContext.getJobType();
    String jobCategory = "ICS " + jobType;
    
    JobStatus jobStatus = new JobStatus();
    jobStatus.setExtractName(mapJobCodeToExtractName(jobCode));
    jobStatus.setStartDate(jobExecution.getStartTime());
    jobStatus.setStopDate(jobExecution.getEndTime());
    jobStatus.setStatus(String.valueOf(jobExecution.getStatus()));
    jobStatus.setJobCategory(jobCategory);
    jobStatus.setFrequency(jobType);
    jobStatus.setSteps(jobCode);
    
    if (jobExecution.getStatus() == BatchStatus.FAILED) {
        log.error(format("Job {} failed with the following exceptions:", jobName));
        jobExecution.getAllFailureExceptions()
                .forEach(ex -> log.error(format("Exception: {}", ex.getMessage())));
        
        if(JOB_CODES.contains(jobCode)){
            try {
                // First try to delete any existing record to avoid constraint violation
                String deleteQuery = "DELETE FROM job_status WHERE extract_name = ?";
                jdbcTemplate.update(deleteQuery, jobStatus.getExtractName());
                
                // Then save the new status
                jobStatusRepository.save(jobStatus);
            } catch (Exception e) {
                log.error(format("Error saving job status: {}", e.getMessage()));
            }
        }
    } else if (isImportJob(jobName)) {
        String tableName = jobCode + "TMP";
        String sql = String.format("SELECT count(*) FROM %s", tableName);
        log.info(format("Count Query: {}", sql));
        Long count = jdbcTemplate.queryForObject(sql, Long.class);
        log.info(format("!!! {} JOB {} is FINISHED! Number of records loaded for {}: {}", jobType, jobName, jobCode, count));
        
        jobStatus.setRecordsLoaded(String.valueOf(count));
        
        try {
            // First try to delete any existing record to avoid constraint violation
            String deleteQuery = "DELETE FROM job_status WHERE extract_name = ?";
            jdbcTemplate.update(deleteQuery, jobStatus.getExtractName());
            
            // Then save the new status
            jobStatusRepository.save(jobStatus);
        } catch (Exception e) {
            log.error(format("Error saving job status: {}", e.getMessage()));
        }
    } else if (isProcessJob(jobName) && JOB_CODES.contains(jobCode)) {
        Long jobCount = jdbcTemplate.queryForObject(
                "SELECT NUMREC FROM LOGLOD WHERE LOADNAME = ? AND TRUNC(LOADDT) = TRUNC(SYSDATE) ORDER BY LOADDT DESC FETCH FIRST 1 ROWS ONLY",
                Long.class,
                jobCode);
        
        jobStatus.setRecordsLoaded(String.valueOf(jobCount));
        
        try {
            // First try to delete any existing record to avoid constraint violation
            String deleteQuery = "DELETE FROM job_status WHERE extract_name = ?";
            jdbcTemplate.update(deleteQuery, jobStatus.getExtractName());
            
            // Then save the new status
            jobStatusRepository.save(jobStatus);
        } catch (Exception e) {
            log.error(format("Error saving job status: {}", e.getMessage()));
        }
        
        log.info(format("!!! JOB {} is FINISHED!!!", jobName));
    } else {
        log.info(format("!!! JOB {} is FINISHED!!!", jobName));
    }
    
    JobContext.clear();
}
