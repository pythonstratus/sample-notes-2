// Frontend structure: src/main/webapp/

// File: src/main/webapp/package.json
{
  "name": "test-runner-ui",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.3.4",
    "bootstrap": "^5.2.3",
    "react": "^18.2.0",
    "react-bootstrap": "^2.7.2",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "sockjs-client": "^1.6.1",
    "stompjs": "^2.3.3",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "proxy": "http://localhost:8080"
}

// File: src/main/webapp/public/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Test Runner Web Interface"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>Test Runner</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

// File: src/main/webapp/src/App.js
import React, { useState } from 'react';
import { Container, Row, Col } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import TestPanel from './components/TestPanel';
import './App.css';

function App() {
  const [testPanels, setTestPanels] = useState([]);

  // Add a new test panel when a test is started
  const addTestPanel = (type, jobId) => {
    const newPanel = {
      id: jobId,
      type: type,
      timestamp: new Date().toLocaleTimeString()
    };
    
    setTestPanels(prevPanels => [newPanel, ...prevPanels]);
  };

  // Remove a test panel
  const removeTestPanel = (jobId) => {
    setTestPanels(prevPanels => prevPanels.filter(panel => panel.id !== jobId));
  };

  return (
    <Container fluid className="app-container">
      <Row className="header">
        <Col>
          <h1>Test Runner Dashboard</h1>
        </Col>
      </Row>
      
      <Row className="control-panel">
        <Col md={4}>
          <button 
            className="btn btn-primary btn-lg btn-block"
            onClick={() => {
              fetch('/api/tests/run/daily', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                  addTestPanel('Daily', data.jobId);
                });
            }}
          >
            Run Daily Test
          </button>
        </Col>
        <Col md={4}>
          <button 
            className="btn btn-success btn-lg btn-block"
            onClick={() => {
              fetch('/api/tests/run/weekly', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                  addTestPanel('Weekly', data.jobId);
                });
            }}
          >
            Run Weekly Test
          </button>
        </Col>
        <Col md={4}>
          <button 
            className="btn btn-warning btn-lg btn-block"
            onClick={() => {
              fetch('/api/tests/run/monthly', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                  addTestPanel('Monthly', data.jobId);
                });
            }}
          >
            Run Monthly Test
          </button>
        </Col>
      </Row>
      
      <Row className="test-panels-container">
        <Col>
          {testPanels.map(panel => (
            <TestPanel 
              key={panel.id}
              jobId={panel.id}
              type={panel.type}
              timestamp={panel.timestamp}
              onClose={() => removeTestPanel(panel.id)}
            />
          ))}
          
          {testPanels.length === 0 && (
            <div className="no-tests-message">
              <p>No tests are currently running. Click one of the buttons above to start a test.</p>
            </div>
          )}
        </Col>
      </Row>
    </Container>
  );
}

export default App;

// File: src/main/webapp/src/components/TestPanel.js
import React, { useState, useEffect, useRef } from 'react';
import { Card, Badge } from 'react-bootstrap';
import SockJS from 'sockjs-client';
import Stomp from 'stompjs';

const TestPanel = ({ jobId, type, timestamp, onClose }) => {
  const [status, setStatus] = useState('RUNNING');
  const [logs, setLogs] = useState([]);
  const [connected, setConnected] = useState(false);
  
  const stompClient = useRef(null);
  const logContainerRef = useRef(null);

  // Connect to WebSocket
  useEffect(() => {
    const socket = new SockJS('/ws');
    stompClient.current = Stomp.over(socket);
    
    stompClient.current.connect({}, frame => {
      setConnected(true);
      
      // Subscribe to updates for this specific job
      stompClient.current.subscribe(`/topic/updates/${jobId}`, message => {
        const update = JSON.parse(message.body);
        
        // Update status
        if (update.status) {
          setStatus(update.status);
        }
        
        // Add log entry
        if (update.log) {
          setLogs(prevLogs => [...prevLogs, update.log]);
        }
        
        // If test is complete, disconnect WebSocket
        if (update.complete) {
          setTimeout(() => {
            disconnect();
          }, 1000);
        }
      });
    }, error => {
      console.error('WebSocket connection error:', error);
      setConnected(false);
    });
    
    return () => {
      disconnect();
    };
  }, [jobId]);

  // Disconnect WebSocket
  const disconnect = () => {
    if (stompClient.current && connected) {
      stompClient.current.disconnect();
      setConnected(false);
    }
  };

  // Auto-scroll log container to bottom
  useEffect(() => {
    if (logContainerRef.current) {
      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;
    }
  }, [logs]);

  // Get status badge color
  const getStatusBadge = () => {
    switch (status) {
      case 'RUNNING':
        return <Badge bg="primary">Running...</Badge>;
      case 'SUCCESS':
        return <Badge bg="success">Success</Badge>;
      case 'FAILED':
        return <Badge bg="danger">Failed</Badge>;
      default:
        return <Badge bg="secondary">Idle</Badge>;
    }
  };

  return (
    <Card className="test-panel mb-3">
      <Card.Header>
        <div className="d-flex justify-content-between align-items-center">
          <div>
            <strong>{type} Test</strong>
            <span className="text-muted ml-2"> - Started at {timestamp}</span>
          </div>
          <div className="d-flex align-items-center">
            {getStatusBadge()}
            <button 
              className="btn btn-sm btn-light ml-2" 
              onClick={onClose}
              title="Close panel"
            >
              Ã—
            </button>
          </div>
        </div>
      </Card.Header>
      <Card.Body>
        <div className="log-container" ref={logContainerRef}>
          {logs.length > 0 ? (
            logs.map((log, index) => (
              <div key={index} className="log-line">
                {log}
              </div>
            ))
          ) : (
            <div className="text-muted">Waiting for logs...</div>
          )}
        </div>
      </Card.Body>
    </Card>
  );
};

export default TestPanel;

// File: src/main/webapp/src/App.css
.app-container {
  padding: 20px;
}

.header {
  margin-bottom: 30px;
  border-bottom: 1px solid #eee;
  padding-bottom: 10px;
}

.control-panel {
  margin-bottom: 30px;
}

.btn-block {
  width: 100%;
  margin-bottom: 10px;
  padding: 15px;
}

.test-panels-container {
  margin-top: 20px;
}

.test-panel {
  margin-bottom: 20px;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.test-panel .card-header {
  background-color: #f8f9fa;
  padding: 12px 15px;
}

.ml-2 {
  margin-left: 10px;
}

.log-container {
  background-color: #1e1e1e;
  color: #f1f1f1;
  border-radius: 4px;
  padding: 10px;
  height: 300px;
  overflow-y: auto;
  font-family: monospace;
  font-size: 0.9rem;
  white-space: pre-wrap;
}

.log-line {
  padding: 2px 0;
  line-height: 1.4;
}

.no-tests-message {
  text-align: center;
  padding: 50px 0;
  background-color: #f8f9fa;
  border-radius: 8px;
  margin-top: 30px;
}

// File: src/main/webapp/src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
