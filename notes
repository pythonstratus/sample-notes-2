CREATE OR REPLACE FUNCTION compare_tables_fn(
    p_source_table IN VARCHAR2,
    p_target_table IN VARCHAR2,
    p_compare_field IN VARCHAR2 DEFAULT NULL,
    p_key_field IN VARCHAR2 DEFAULT NULL,
    p_parallel_degree IN NUMBER DEFAULT 2,
    p_sample_percent IN NUMBER DEFAULT NULL,
    p_max_differences IN NUMBER DEFAULT 10000,
    p_source_schema IN VARCHAR2 DEFAULT NULL,
    p_target_schema IN VARCHAR2 DEFAULT NULL
) RETURN SYS_REFCURSOR
AS
    TYPE t_column_list IS TABLE OF VARCHAR2(128);
    v_compare_columns t_column_list := t_column_list();
    v_source_exists NUMBER;
    v_target_exists NUMBER;
    v_key_field VARCHAR2(128);
    v_sql VARCHAR2(32767);
    v_dynamic_cursor SYS_REFCURSOR;
    v_count NUMBER;
    v_parallel_hint VARCHAR2(200);
    v_sample_clause VARCHAR2(100) := '';
    v_rownum_clause VARCHAR2(100) := '';
    v_source_schema VARCHAR2(128);
    v_target_schema VARCHAR2(128);
    v_source_table_full VARCHAR2(256);
    v_target_table_full VARCHAR2(256);
    
BEGIN
    -- Validate required input parameters
    IF p_source_table IS NULL OR p_target_table IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'Source table and target table must be specified');
    END IF;
    
    -- Set schema names (use current schema if not specified)
    v_source_schema := NVL(UPPER(p_source_schema), SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA'));
    v_target_schema := NVL(UPPER(p_target_schema), SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA'));
    
    -- Build fully qualified table names
    v_source_table_full := v_source_schema || '.' || UPPER(p_source_table);
    v_target_table_full := v_target_schema || '.' || UPPER(p_target_table);
    
    -- Check if the tables exist in their respective schemas
    SELECT COUNT(*) INTO v_source_exists 
    FROM all_tables 
    WHERE table_name = UPPER(p_source_table) AND owner = v_source_schema;
    
    SELECT COUNT(*) INTO v_target_exists 
    FROM all_tables 
    WHERE table_name = UPPER(p_target_table) AND owner = v_target_schema;
    
    IF v_source_exists = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Source table ' || v_source_table_full || ' does not exist');
    END IF;
    
    IF v_target_exists = 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Target table ' || v_target_table_full || ' does not exist');
    END IF;
    
    -- Build parallel hint based on parameter
    IF p_parallel_degree > 1 THEN
        v_parallel_hint := '/*+ PARALLEL(' || v_source_schema || '.' || UPPER(p_source_table) || ',' || p_parallel_degree || ') ' ||
                          'PARALLEL(' || v_target_schema || '.' || UPPER(p_target_table) || ',' || p_parallel_degree || ') ' ||
                          'USE_HASH(s t) PQ_DISTRIBUTE(t HASH HASH) */';
    ELSE
        v_parallel_hint := '/*+ USE_HASH(s t) */';
    END IF;
    
    -- Build sampling clause if specified
    IF p_sample_percent IS NOT NULL AND p_sample_percent > 0 AND p_sample_percent <= 100 THEN
        v_sample_clause := ' SAMPLE(' || p_sample_percent || ')';
    END IF;
    
    -- Build row limit clause if specified
    IF p_max_differences IS NOT NULL AND p_max_differences > 0 THEN
        v_rownum_clause := ' AND ROWNUM <= ' || p_max_differences;
    END IF;
    
    -- Determine key field if not provided (updated for cross-schema support)
    IF p_key_field IS NULL THEN
        BEGIN
            SELECT column_name INTO v_key_field
            FROM all_cons_columns
            WHERE constraint_name = (
                SELECT constraint_name 
                FROM all_constraints 
                WHERE table_name = UPPER(p_source_table) 
                AND constraint_type = 'P'
                AND owner = v_source_schema
            )
            AND ROWNUM = 1
            AND owner = v_source_schema;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                BEGIN
                    SELECT column_name INTO v_key_field
                    FROM all_cons_columns
                    WHERE constraint_name = (
                        SELECT constraint_name 
                        FROM all_constraints 
                        WHERE table_name = UPPER(p_source_table) 
                        AND constraint_type = 'U'
                        AND owner = v_source_schema
                    )
                    AND ROWNUM = 1
                    AND owner = v_source_schema;
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        SELECT column_name INTO v_key_field
                        FROM all_tab_columns
                        WHERE table_name = UPPER(p_source_table)
                        AND owner = v_source_schema
                        AND ROWNUM = 1
                        ORDER BY column_id;
                END;
        END;
    ELSE
        v_key_field := p_key_field;
    END IF;
    
    -- Verify key field exists in both tables (updated for cross-schema)
    SELECT COUNT(*) INTO v_source_exists
    FROM all_tab_columns
    WHERE table_name = UPPER(p_source_table)
    AND column_name = UPPER(v_key_field)
    AND owner = v_source_schema;
    
    SELECT COUNT(*) INTO v_target_exists
    FROM all_tab_columns
    WHERE table_name = UPPER(p_target_table)
    AND column_name = UPPER(v_key_field)
    AND owner = v_target_schema;
    
    IF v_source_exists = 0 OR v_target_exists = 0 THEN
        RAISE_APPLICATION_ERROR(-20006, 'Key field ' || v_key_field || ' does not exist in both tables');
    END IF;
    
    -- Determine which columns to compare (updated for cross-schema)
    IF p_compare_field IS NULL THEN
        FOR col_rec IN (
            SELECT column_name
            FROM all_tab_columns
            WHERE table_name = UPPER(p_source_table)
            AND owner = v_source_schema
            AND column_name IN (
                SELECT column_name
                FROM all_tab_columns
                WHERE table_name = UPPER(p_target_table)
                AND owner = v_target_schema
            )
            AND column_name <> v_key_field
            ORDER BY column_id
        ) LOOP
            v_compare_columns.EXTEND;
            v_compare_columns(v_compare_columns.COUNT) := col_rec.column_name;
        END LOOP;
        
        IF v_compare_columns.COUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20007, 'No common columns found between tables except key field');
        END IF;
    ELSE
        SELECT COUNT(*) INTO v_source_exists
        FROM all_tab_columns
        WHERE table_name = UPPER(p_source_table)
        AND column_name = UPPER(p_compare_field)
        AND owner = v_source_schema;
        
        SELECT COUNT(*) INTO v_target_exists
        FROM all_tab_columns
        WHERE table_name = UPPER(p_target_table)
        AND column_name = UPPER(p_compare_field)
        AND owner = v_target_schema;
        
        IF v_source_exists = 0 OR v_target_exists = 0 THEN
            RAISE_APPLICATION_ERROR(-20008, 'Compare field ' || p_compare_field || ' does not exist in both tables');
        END IF;
        
        v_compare_columns.EXTEND;
        v_compare_columns(1) := p_compare_field;
    END IF;
    
    -- Log comparison parameters
    DBMS_OUTPUT.PUT_LINE('Comparing tables: ' || v_source_table_full || ' and ' || v_target_table_full);
    DBMS_OUTPUT.PUT_LINE('Key field: ' || v_key_field);
    DBMS_OUTPUT.PUT_LINE('Comparing ' || v_compare_columns.COUNT || ' column(s)');
    DBMS_OUTPUT.PUT_LINE('Parallel degree: ' || p_parallel_degree);
    IF p_sample_percent IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE('Sample percentage: ' || p_sample_percent || '%');
    END IF;
    
    -- Build optimized SQL query with hints and performance improvements
    v_sql := 'SELECT ' || v_parallel_hint || ' * FROM (
    SELECT 
        CASE
            WHEN t.' || v_key_field || ' IS NULL THEN ''ONLY_IN_SOURCE''
            WHEN s.' || v_key_field || ' IS NULL THEN ''ONLY_IN_TARGET''
            ELSE ''DIFFERENT''
        END AS status,
        COALESCE(s.' || v_key_field || ', t.' || v_key_field || ') AS key_value';
    
    -- Add source and target columns to select
    FOR i IN 1..v_compare_columns.COUNT LOOP
        v_sql := v_sql || ',
        s.' || v_compare_columns(i) || ' AS ' || v_compare_columns(i) || '_source,
        t.' || v_compare_columns(i) || ' AS ' || v_compare_columns(i) || '_target';
    END LOOP;
    
    -- Optimized FROM clause with hash join and parallel hints
    v_sql := v_sql || '
    FROM (SELECT ' || v_key_field;
    
    -- Add source columns
    FOR i IN 1..v_compare_columns.COUNT LOOP
        v_sql := v_sql || ', ' || v_compare_columns(i);
    END LOOP;
    
    v_sql := v_sql || ' FROM ' || v_source_table_full || v_sample_clause || ') s
    FULL OUTER JOIN (SELECT ' || v_key_field;
    
    -- Add target columns  
    FOR i IN 1..v_compare_columns.COUNT LOOP
        v_sql := v_sql || ', ' || v_compare_columns(i);
    END LOOP;
    
    v_sql := v_sql || ' FROM ' || v_target_table_full || v_sample_clause || ') t 
    ON s.' || v_key_field || ' = t.' || v_key_field || '
    WHERE (t.' || v_key_field || ' IS NULL  -- Records only in source
       OR s.' || v_key_field || ' IS NULL   -- Records only in target
       OR (';
    
    -- Optimized comparison logic using DECODE for better performance
    FOR i IN 1..v_compare_columns.COUNT LOOP
        IF i > 1 THEN
            v_sql := v_sql || ' OR ';
        END IF;
        
        -- More efficient NULL-safe comparison
        v_sql := v_sql || '(NVL(s.' || v_compare_columns(i) || ', ''~~NULL~~'') != NVL(t.' || 
                 v_compare_columns(i) || ', ''~~NULL~~''))';
    END LOOP;
    
    v_sql := v_sql || '))' || v_rownum_clause || '
    ORDER BY 
        CASE status 
            WHEN ''ONLY_IN_SOURCE'' THEN 1 
            WHEN ''ONLY_IN_TARGET'' THEN 2 
            ELSE 3 
        END, 
        key_value
    ) WHERE ROWNUM <= ' || NVL(p_max_differences, 10000);
    
    -- Enable parallel DML if using parallel execution
    IF p_parallel_degree > 1 THEN
        EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    END IF;
    
    -- Open cursor with the optimized SQL
    OPEN v_dynamic_cursor FOR v_sql;
    
    RETURN v_dynamic_cursor;
    
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('Error backtrace: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        DBMS_OUTPUT.PUT_LINE('SQL Statement: ' || SUBSTR(v_sql, 1, 4000));
        RAISE;
END compare_tables_fn;
/

-- Create a wrapper procedure for easier execution with different options
CREATE OR REPLACE PROCEDURE compare_tables_proc(
    p_source_table IN VARCHAR2,
    p_target_table IN VARCHAR2,
    p_compare_field IN VARCHAR2 DEFAULT NULL,
    p_key_field IN VARCHAR2 DEFAULT NULL,
    p_parallel_degree IN NUMBER DEFAULT 2,
    p_sample_percent IN NUMBER DEFAULT NULL,
    p_max_differences IN NUMBER DEFAULT 1000,
    p_source_schema IN VARCHAR2 DEFAULT NULL,
    p_target_schema IN VARCHAR2 DEFAULT NULL
)
AS
    v_cursor SYS_REFCURSOR;
    v_status VARCHAR2(20);
    v_key_value VARCHAR2(4000);
    v_source_val VARCHAR2(4000);
    v_target_val VARCHAR2(4000);
    v_count NUMBER := 0;
BEGIN
    v_cursor := compare_tables_fn(
        p_source_table => p_source_table,
        p_target_table => p_target_table,
        p_compare_field => p_compare_field,
        p_key_field => p_key_field,
        p_parallel_degree => p_parallel_degree,
        p_sample_percent => p_sample_percent,
        p_max_differences => p_max_differences,
        p_source_schema => p_source_schema,
        p_target_schema => p_target_schema
    );
    
    DBMS_OUTPUT.PUT_LINE('=== COMPARISON RESULTS ===');
    DBMS_OUTPUT.PUT_LINE('STATUS | KEY | SOURCE | TARGET');
    DBMS_OUTPUT.PUT_LINE('-------|-----|--------|-------');
    
    -- For single field comparison, show simplified output
    IF p_compare_field IS NOT NULL THEN
        LOOP
            FETCH v_cursor INTO v_status, v_key_value, v_source_val, v_target_val;
            EXIT WHEN v_cursor%NOTFOUND OR v_count >= p_max_differences;
            
            DBMS_OUTPUT.PUT_LINE(v_status || ' | ' || v_key_value || ' | ' || 
                                NVL(v_source_val, 'NULL') || ' | ' || 
                                NVL(v_target_val, 'NULL'));
            v_count := v_count + 1;
        END LOOP;
    END IF;
    
    CLOSE v_cursor;
    DBMS_OUTPUT.PUT_LINE('=== Total differences found: ' || v_count || ' ===');
END;
/

-- Helper function to check schema access permissions
CREATE OR REPLACE FUNCTION check_schema_access(p_schema_name IN VARCHAR2) RETURN BOOLEAN
AS
    v_count NUMBER;
BEGIN
    -- Check if we can query tables in the specified schema
    SELECT COUNT(*) INTO v_count
    FROM all_tables
    WHERE owner = UPPER(p_schema_name)
    AND ROWNUM = 1;
    
    RETURN (v_count > 0);
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END;
/

-- Utility procedure to list available schemas
CREATE OR REPLACE PROCEDURE list_accessible_schemas
AS
BEGIN
    DBMS_OUTPUT.PUT_LINE('=== Accessible Schemas ===');
    FOR schema_rec IN (
        SELECT DISTINCT owner
        FROM all_tables
        WHERE owner NOT IN ('SYS', 'SYSTEM', 'CTXSYS', 'MDSYS', 'OLAPSYS', 'WMSYS', 'XDB', 'ORDDATA', 'ORDSYS')
        ORDER BY owner
    ) LOOP
        DBMS_OUTPUT.PUT_LINE(schema_rec.owner);
    END LOOP;
END;
/

-- Enhanced comparison procedure with schema validation
CREATE OR REPLACE PROCEDURE compare_tables_enhanced(
    p_source_table IN VARCHAR2,
    p_target_table IN VARCHAR2,
    p_source_schema IN VARCHAR2 DEFAULT NULL,
    p_target_schema IN VARCHAR2 DEFAULT NULL,
    p_compare_field IN VARCHAR2 DEFAULT NULL,
    p_key_field IN VARCHAR2 DEFAULT NULL,
    p_parallel_degree IN NUMBER DEFAULT 2,
    p_sample_percent IN NUMBER DEFAULT NULL,
    p_max_differences IN NUMBER DEFAULT 1000,
    p_validate_schemas IN BOOLEAN DEFAULT TRUE
)
AS
    v_source_schema VARCHAR2(128);
    v_target_schema VARCHAR2(128);
    v_cursor SYS_REFCURSOR;
BEGIN
    -- Set default schemas
    v_source_schema := NVL(UPPER(p_source_schema), SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA'));
    v_target_schema := NVL(UPPER(p_target_schema), SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA'));
    
    -- Validate schema access if requested
    IF p_validate_schemas THEN
        IF NOT check_schema_access(v_source_schema) THEN
            RAISE_APPLICATION_ERROR(-20010, 'Cannot access source schema: ' || v_source_schema);
        END IF;
        
        IF NOT check_schema_access(v_target_schema) THEN
            RAISE_APPLICATION_ERROR(-20011, 'Cannot access target schema: ' || v_target_schema);
        END IF;
    END IF;
    
    -- Call the main comparison function
    compare_tables_proc(
        p_source_table => p_source_table,
        p_target_table => p_target_table,
        p_compare_field => p_compare_field,
        p_key_field => p_key_field,
        p_parallel_degree => p_parallel_degree,
        p_sample_percent => p_sample_percent,
        p_max_differences => p_max_differences,
        p_source_schema => v_source_schema,
        p_target_schema => v_target_schema
    );
END;
/
