//E6Tmp.java
package com.abc.sbse.os.ts.csp.alsentity.ale.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.persistence.Column;
import java.util.Date;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "E6TMP")
public class E6Tmp {

    // OUTPUTCD         CHAR(2),
    @Column(name = "OUTPUTCD")
    private String outputCd;

    // EMPASGMTNUM      INTEGER EXTERNAL(8)
    @Column(name = "EMPASGMTNUM")
    private Long empAsgmtNum;

    // ENTEXTRACTDT    DATE "YYYYMMDD"
    @Column(name = "ENTEXTRACTDT")
    private Date entExtractDt;

    // RPTENDDINGDT    DATE "YYYYMMDD"
    @Column(name = "RPTENDDINGDT")
    private Date rptEndDingDt;

    // LEVYGROUOCNT    INTEGER EXTERNAL(4)
    @Column(name = "LEVYGROUOCNT")
    private Integer levyGroupCnt;

    // SEIZUREGRPCNT   INTEGER EXTERNAL(4)
    @Column(name = "SEIZUREGRPCNT")
    private Integer seizureGrpCnt;

    // WRITGROUOCNT    INTEGER EXTERNAL(4)
    @Column(name = "WRITGROUOCNT")
    private Integer writGroupCnt;

    // FTDRECEIPTCNT   INTEGER EXTERNAL(6)
    @Column(name = "FTDRECEIPTCNT")
    private Integer ftdReceiptCnt;

    // FTDDISPOSTCNT   INTEGER EXTERNAL(6)
    @Column(name = "FTDDISPOSTCNT")
    private Integer ftdDispostCnt;

    // FTPOPEN         INTEGER EXTERNAL(6)
    @Column(name = "FTPOPEN")
    private Integer ftpOpen;
}


// E6TmpRepository.java

package com.abc.sbse.os.ts.csp.alsentity.ale.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.abc.sbse.os.ts.csp.alsentity.ale.model.E6Tmp;

@Repository
public interface E6TmpRepository extends JpaRepository<E6Tmp, Long> {

    // Update FTDRECEIPTCNT to '0' where null
    @Modifying
    @Transactional
    @Query("UPDATE E6TMP e SET e.ftdreceiptcnt = '0' WHERE e.ftdreceiptcnt IS NULL")
    void updateNullFtdreceiptcnt();

    // Update FTDDISPOSTCNT to '0' where null
    @Modifying
    @Transactional
    @Query("UPDATE E6TMP e SET e.ftddispostcnt = '0' WHERE e.ftddispostcnt IS NULL")
    void updateNullFtddispostcnt();

    // Delete records where empasgmtnum not in active groups
    @Modifying
    @Transactional
    @Query(value = "DELETE FROM E6TMP WHERE empasgmtnum not in " +
           "(SELECT GRPNUM FROM GRPACTIVE WHERE ACTIVE = 'Y' and org = 'CF')", 
           nativeQuery = true)
    void deleteByInactiveGroups();

    // Count all records
    @Query("SELECT COUNT(e) FROM E6TMP e")
    long countAll();

    // Get current date and time
    @Query(value = "SELECT TO_CHAR(SYSDATE, 'MM/DD/YYYY - HH:MI:SS AM') FROM DUAL", 
           nativeQuery = true)
    String getCurrentDateTime();

    // Update RPTMNTH where null
    @Modifying
    @Transactional
    @Query(value = "UPDATE E6TMP SET rptmnth = " +
           "(SELECT distinct rptmonth FROM ENTMONTH e WHERE e.enddt = rptendingdt) " +
           "WHERE rptmnth is NULL", 
           nativeQuery = true)
    void updateNullRptmnth();
}


// E6TmpService.java

package com.abc.sbse.os.ts.csp.alsentity.ale.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.abc.sbse.os.ts.csp.alsentity.ale.repository.E6TmpRepository;

@Service
public class E6TmpService {

    @Autowired
    private E6TmpRepository e6TmpRepository;

    // Update FTDRECEIPTCNT for null values
    @Transactional
    public void updateNullFtdreceiptcnt() {
        e6TmpRepository.updateNullFtdreceiptcnt();
    }

    // Update FTDDISPOSTCNT for null values
    @Transactional
    public void updateNullFtddispostcnt() {
        e6TmpRepository.updateNullFtddispostcnt();
    }

    // Delete records not in active groups
    @Transactional
    public void deleteInactiveGroups() {
        e6TmpRepository.deleteByInactiveGroups();
    }

    // Count all records in E6TMP
    public long countRecords() {
        return e6TmpRepository.countAll();
    }

    // Get current date and time in specified format
    public String getCurrentDateTime() {
        return e6TmpRepository.getCurrentDateTime();
    }

    // Update RPTMNTH where null
    @Transactional
    public void updateNullRptmnth() {
        e6TmpRepository.updateNullRptmnth();
    }
}

// E6TmpController.java

package com.abc.sbse.os.ts.csp.alsentity.ale.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.abc.sbse.os.ts.csp.alsentity.ale.service.E6TmpService;

@RestController
@RequestMapping("/e6tmp")
public class E6TmpController {

    @Autowired
    private E6TmpService e6TmpService;

    @PutMapping("/update-null-ftdreceiptcnt")
    public void updateNullFtdreceiptcnt() {
        e6TmpService.updateNullFtdreceiptcnt();
    }

    @PutMapping("/update-null-ftddispostcnt")
    public void updateNullFtddispostcnt() {
        e6TmpService.updateNullFtddispostcnt();
    }

    @DeleteMapping("/delete-inactive-groups")
    public void deleteInactiveGroups() {
        e6TmpService.deleteInactiveGroups();
    }

    @GetMapping("/count-records")
    public long countRecords() {
        return e6TmpService.countRecords();
    }

    @GetMapping("/current-datetime")
    public String getCurrentDateTime() {
        return e6TmpService.getCurrentDateTime();
    }

    @PutMapping("/update-null-rptmnth")
    public void updateNullRptmnth() {
        e6TmpService.updateNullRptmnth();
    }
}
