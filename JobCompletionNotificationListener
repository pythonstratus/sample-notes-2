package com.example.e1processor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.listener.JobExecutionListenerSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

@Component
public class JobCompletionNotificationListener extends JobExecutionListenerSupport {

    private static final Logger log = LoggerFactory.getLogger(JobCompletionNotificationListener.class);

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public JobCompletionNotificationListener(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public void afterJob(JobExecution jobExecution) {
        if (jobExecution.getStatus() == BatchStatus.COMPLETED) {
            log.info("!!! JOB FINISHED! Time to verify the results");

            // You can query the database to verify the loading was successful
            Long count = jdbcTemplate.queryForObject("SELECT COUNT(*) FROM E1TMP", Long.class);
            log.info("Number of records loaded into E1TMP: {}", count);
        } else if (jobExecution.getStatus() == BatchStatus.FAILED) {
            log.error("Job failed with following exceptions: ");
            jobExecution.getAllFailureExceptions().forEach(ex -> log.error("Exception: {}", ex.getMessage()));
        }
    }
}
